% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user-feedback.R
\name{modal_386}
\alias{modal_386}
\alias{show_modal_386}
\alias{remove_modal_386}
\title{Create a Bootstrap 386 modal}
\usage{
modal_386(
  ...,
  title = NULL,
  footer = modalButton("Dismiss"),
  size = c("m", "s", "l", "xl"),
  easyClose = FALSE,
  fade = TRUE
)

show_modal_386(ui, session = getDefaultReactiveDomain())

remove_modal_386(session = getDefaultReactiveDomain())
}
\arguments{
\item{...}{UI elements for the body of the modal dialog box.}

\item{title}{An optional title for the dialog.}

\item{footer}{UI for footer. Use \code{NULL} for no footer.}

\item{size}{One of \code{"s"} for small, \code{"m"} (the default) for medium,
\code{"l"} for large, or \code{"xl"} for extra large. Note that \code{"xl"} only
works with Bootstrap 4 and above (to opt-in to Bootstrap 4+,
pass \code{\link[bslib:bs_theme]{bslib::bs_theme()}} to the \code{theme} argument of a page container
like \code{\link[shiny:fluidPage]{fluidPage()}}).}

\item{easyClose}{If \code{TRUE}, the modal dialog can be dismissed by
clicking outside the dialog box, or be pressing the Escape key. If
\code{FALSE} (the default), the modal dialog can't be dismissed in those
ways; instead it must be dismissed by clicking on a \code{modalButton()}, or
from a call to \code{\link[shiny:removeModal]{removeModal()}} on the server.}

\item{fade}{If \code{FALSE}, the modal dialog will have no fade-in animation
(it will simply appear rather than fade in to view).}

\item{ui}{UI content to show in the modal.}

\item{session}{The \code{session} object passed to function given to
\code{shinyServer}.}
}
\description{
Create a Bootstrap 386 modal

Show a Bootstrap 386 modal

Hide a Bootstrap 386 modal
}
\examples{
if (interactive()) {
 library(shiny)
 library(shiny386)

 shinyApp(
  ui = page_386(
    button_386("show", "Show modal dialog"),
    verbatimTextOutput("dataInfo")
  ),

  server = function(input, output) {
    # reactiveValues object for storing current data set.
    vals <- reactiveValues(data = NULL)

   # Return the UI for a modal dialog with data selection input. If 'failed' is
   # TRUE, then display a message that the previous value was invalid.
   dataModal <- function(failed = FALSE) {
     modal_386(
       textInput("dataset", "Choose data set",
                 placeholder = 'Try "mtcars" or "abc"'
       ),
       span('(Try the name of a valid data object like "mtcars", ',
            'then a name of a non-existent object like "abc")'),
       if (failed)
         div(tags$b("Invalid name of data object", style = "color: red;")),

       footer = tagList(
         modalButton("Cancel"),
         button_386("ok", "OK")
       )
     )
   }

   # Show modal when button is clicked.
   observeEvent(input$show, {
     show_modal_386(dataModal())
   })

   # When OK button is pressed, attempt to load the data set. If successful,
   # remove the modal. If not show another modal, but this time with a failure
   # message.
   observeEvent(input$ok, {
     # Check that data object exists and is data frame.
     if (!is.null(input$dataset) && nzchar(input$dataset) &&
         exists(input$dataset) && is.data.frame(get(input$dataset))) {
       vals$data <- get(input$dataset)
       remove_modal_386()
     } else {
       show_modal_386(dataModal(failed = TRUE))
     }
   })

   # Display information about selected data
   output$dataInfo <- renderPrint({
     if (is.null(vals$data))
       "No data selected"
     else
       summary(vals$data)
   })
  }
 )
}
}
